stages:
    - test-backend
    - test-frontend
    - dependency-scan

services:
    - postgres:12.2-alpine

variables:
    DJANGO_ALLOWED_HOSTS: localhost 0.0.0.0 127.0.0.1 [::1]
    SECRET_KEY: foo
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: Nano1947
    POSTGRES_HOST_AUTH_METHOD: trust
    SQL_HOST: postgres

test-backend:
    stage: test-backend
    image: python:3.7
    script:
        - "export DATABASE_URL=postgres://postgres:@postgres:5432/project_ci_test"
        - pip install --no-cache-dir -r requirements.txt
        - python manage.py makemigrations account
        - python manage.py migrate
        - python manage.py test

test-frontend:
    stage: test-frontend
    image: "node:14.4"
    script:
    - cd front_end
    - npm install
    - npm test

dependency-scan:
    stage: dependency-scan
    image: docker:stable
    variables:
        DOCKER_DRIVER: overlay2
    allow_failure: true
    services:
        - docker:stable-dind
    script:
        - ls
        - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
        - docker run
            --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
            --volume "$PWD:/code"
            --volume /var/run/docker.sock:/var/run/docker.sock
            "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
    artifacts:
        reports:
            dependency_scanning: gl-dependency-scanning-report.json
